@import '~@styles/config/variables';
@import '~@styles/helpers/functions';
@import '~@styles/helpers/mixins';
@import '~breakpoint-sass/stylesheets/breakpoint';
@import '~@styles/config/variables-export';

$label-padding-xx-small: 0 0 2px 3px;
$label-padding-small: $label-padding-xx-small;
$label-padding-medium: 0 0 3px 5px;
$label-padding-large: 0 0 4px 7px;
$label-color: $white;
$input-padding: 7px 10px 7px 10px;
$line-height: 1.28;
$input-color: map-deep-get($field-colors, field, color);
$input-border-width: 2px;
$input-border-color: map-deep-get($field-colors, field, border);
$input-border-color-hover: map-deep-get($field-colors, hover, border);
$field-border-radius: 5px;
$field-texts-opacity: 0.6;
$disabled-field-opacity: 0.4;
$select-icon-width: 34px;
$transition-duration: 200ms;
$transition-timing-function: cubic-bezier(0, 0, 0.2, 1);

@mixin font-input {
  font-family: unquote($default-font + ', ' + $default-font-fallback);
  font-size: $font-size-xx-small;
  letter-spacing: -0.012em;
  line-height: $line-height;
  color: rgba($input-color, $field-texts-opacity);

  &:focus,
  &:active {
    color: $input-color;
  }

  @include breakpoint(map-get($breakpoints, small)) {
    font-size: $font-size-small;
  }

  @include breakpoint(map-get($breakpoints, medium)) {
    font-size: $font-size-normal;
  }

  @include breakpoint(map-get($breakpoints, large)) {
    font-size: $font-size-x-large;
  }

  // max height adjustments
  @include breakpoint(orientation landscape) {
    @include breakpoint(map-get($breakpoints, small) (max-height 400px)) {
      font-size: $font-size-xx-small;
    }

    @include breakpoint(map-get($breakpoints, medium) (max-height 440px)) {
      font-size: $font-size-small;
    }

    @include breakpoint(map-get($breakpoints, large) (max-height 540px)) {
      font-size: $font-size-normal;
    }
  }
}

@mixin font-label {
  font-family: unquote($default-font + ', ' + $default-font-fallback);
  font-size: $font-size-tiny;
  letter-spacing: -0.002em;
  line-height: $line-height;
  color: rgba($label-color, $field-texts-opacity);

  @include breakpoint(map-get($breakpoints, small)) {
    font-size: $font-size-xx-small;
  }

  @include breakpoint(map-get($breakpoints, medium)) {
    font-size: $font-size-x-small;
  }

  @include breakpoint(map-get($breakpoints, large)) {
    font-size: $font-size-normal;
  }

  // max height adjustments
  @include breakpoint(orientation landscape) {
    @include breakpoint(map-get($breakpoints, small) (max-height 400px)) {
      font-size: $font-size-tiny;
    }

    @include breakpoint(map-get($breakpoints, medium) (max-height 440px)) {
      font-size: $font-size-xx-small;
    }

    @include breakpoint(map-get($breakpoints, large) (max-height 540px)) {
      font-size: $font-size-x-small;
    }
  }
}

@mixin selectArrowIcon($icon-width) {
  $width: 21px;
  $height: 12px;
  $icon-height: stretchBySize($width, $height, $icon-width);

  width: $icon-width;
  height: $icon-height;
}

.field-wrapper {
  &#{&} {
    padding-bottom: 7px;
  }
}

.field-label {
  &#{&} {
    @include font-label;
    padding: $label-padding-xx-small;
    transform: none;
    position: relative;

    @include breakpoint(map-get($breakpoints, medium)) {
      padding: $label-padding-medium;
    }

    @include breakpoint(map-get($breakpoints, large)) {
      padding: $label-padding-large;
    }

    &#{&}-disabled {
      color: rgba($label-color, $field-texts-opacity);
      opacity: $disabled-field-opacity;
    }

    &#{&}-error {
      color: $error-color;
    }

    &#{&}-focused {
      color: $label-color;

      &.field-label-error {
        color: $error-color;
      }
    }

    &#{&}-shrink {
      pointer-events: auto;
      transform: none;

      &.field-label-animated {
        color: transparent;
      }

      &:before,
      &:after {
        @include font-label;

        top: 0;
        left: 0;
        padding: 0 0 0 nth($label-padding-xx-small, 4);
        width: 100%;
        height: 100%;
        max-height: none;
        white-space: normal;
        opacity: 1;
        border-width: 0;

        @include breakpoint(map-get($breakpoints, medium)) {
          padding: 0 0 0 nth($label-padding-medium, 4);
        }

        @include breakpoint(map-get($breakpoints, large)) {
          padding: 0 0 0 nth($label-padding-large, 4);
        }
      }

      &#{&}.field-label-focused {
        &:before,
        &:after {
          color: $label-color;
        }
      }

      &#{&}.field-label-error {
        &:before {
          color: $error-color;
        }

        &.field-label-animated {
          color: transparent;
        }
      }
    }

    &-outlined {
      content: '';
    }

    &-animated {
      color: transparent;
      pointer-events: none;
      z-index: 10;

      &.field-label-error {
        color: transparent;
      }

      &:before {
        @include font-input;

        content: attr(data-text);
        top: 100%;
        left: nth($input-padding, 2);
        padding: nth($input-padding, 1) nth($input-padding, 2)
          nth($input-padding, 1) 0;
        width: calc(100% - #{nth($input-padding, 2)});
        height: calc(100% + #{(nth($input-padding, 1) * 2)});
        max-height: 30px;
        text-overflow: ellipsis;
        white-space: nowrap;
        color: rgba($input-color, $field-texts-opacity);
        display: block;
        box-sizing: border-box;
        opacity: $field-texts-opacity;
        overflow: hidden;
        border-width: 0;
        transition-duration: $transition-duration;
        transition-property: top, left, padding, height, font-size,
          letter-spacing, color, opacity;
        transition-timing-function: $transition-timing-function;
        position: absolute;

        @include breakpoint(map-get($breakpoints, small)) {
          max-height: 33px;
        }

        @include breakpoint(map-get($breakpoints, medium)) {
          max-height: 35px;
        }

        @include breakpoint(map-get($breakpoints, large)) {
          max-height: 41px;
        }
      }

      &.field-label-animated.field-label-disabled {
        color: transparent;

        &:before {
          @include font-label;

          top: 0;
          left: 0;
          padding: 0 0 0 nth($label-padding-xx-small, 4);
          width: 100%;
          height: 100%;
          max-height: none;
          text-overflow: clip;
          white-space: normal;
          opacity: 1;
        }
      }
    }

    &-hidden {
      @include hidden;
    }
  }
}

.field-input {
  &#{&} {
    font-size: inherit;
    overflow: hidden;
    border-radius: $field-border-radius;

    .field-input-outlined {
      top: 0;

      border: $input-border-width solid $input-border-color;

      legend {
        // removes MUI animated labels
        display: none;
      }
    }

    &:hover {
      .field-input-outlined {
        border-color: $input-border-color-hover;
      }
    }

    &#{&}-error {
      .field-input-outlined {
        border-color: $error-color;
      }
    }

    &-disabled {
      opacity: $disabled-field-opacity;
    }

    &.field-input-disabled {
      .field-input-outlined {
        border-color: rgba($black, 0.5);
      }
    }

    &-focused {
      background-color: map-deep-get($field-colors, active, background);

      // hard MUI override
      .field-input-outlined.field-input-outlined {
        border-color: $input-border-color-hover;
      }
    }

    &-multiline {
      padding: 0;
    }
  }
}

.input {
  &#{&} {
    @include font-input;

    margin: 0;
    padding: $input-padding;
    height: auto;
    box-sizing: border-box;

    &#{&}-select {
      padding-right: $select-icon-width;

      &-native {
        option {
          color: $black;
        }
      }
    }

    // placeholder, and simulated placeholder for Select Menus
    &-placeholder,
    &::placeholder {
      text-overflow: ellipsis;
      /* stylelint-disable-next-line declaration-no-important*/
      color: rgba($input-color, $field-texts-opacity) !important;
      opacity: $field-texts-opacity;
    }

    // simulated placeholder for Select Menus
    .field-label.field-label-animated + .field-input & {
      &-placeholder {
        @include breakpoint(map-get($breakpoints, medium)) {
          opacity: 0;
        }
      }
    }

    // same as above
    .field-label.field-label-animated + .field-input-disabled & {
      &-placeholder {
        color: rgba($input-color, $field-texts-opacity);
        opacity: 1;
      }
    }

    // select icon
    ~ .select-icon {
      top: auto;
      width: $select-icon-width;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      transition-duration: $transition-duration;
      transition-property: transform;
      transition-timing-function: $transition-timing-function;

      svg {
        @include selectArrowIcon(12px);
        fill: $input-border-color;
      }

      .field-input:hover & {
        svg {
          fill: $input-border-color-hover;
        }
      }

      .field-input.field-input-error & {
        svg {
          fill: $error-color;
        }
      }
    }

    .field-label.field-label-disabled + .field-input.field-input-disabled & {
      &::placeholder {
        /* stylelint-disable-next-line declaration-no-important*/
        opacity: 1 !important; // Overrides MUI important rule, why, why, why they do that?
        /*
        label[data-shrink=false] + .MuiInputBase-formControl .MuiInputBase-input::-webkit-input-placeholder {
          opacity: 0 !important;
        }
        */
      }
    }

    &:-webkit-autofill,
    &:-webkit-autofill:first-line,
    &:-webkit-autofill:hover,
    &:-webkit-autofill:focus,
    &:-internal-autofill-selected {
      @include font-input;

      color: $black;
    }
  }
}

.menu {
  &-wrapper {
    content: 'menu-wrapper';
    margin-top: -1px;
  }

  &#{&} {
    content: '';
    padding: 0;

    & .menu-item {
      @include font-input;
      min-height: 0;
      color: $black;

      &:hover {
        background-color: rgba($black, 0.3);
      }

      &:before {
        display: none;
      }

      &-selected {
        font-weight: 700;
        background-color: rgba($black, 0.6);

        &:hover {
          background-color: rgba($black, 0.9);
        }
      }
    }
  }
}

.helper {
  &#{&} {
    padding: 0 nth($label-padding-xx-small, 4);
    font-family: unquote($default-font + ', ' + $default-font-fallback);
    font-size: $font-size-tiny;
    font-weight: 600;
    letter-spacing: -0.018rem;
    color: map-deep-get($field-colors, field, color);

    @include breakpoint(map-get($breakpoints, small)) {
      font-size: $font-size-xx-small;
    }

    @include breakpoint(map-get($breakpoints, medium)) {
      padding: 0 nth($label-padding-medium, 4);
      font-size: $font-size-x-small;
    }

    @include breakpoint(map-get($breakpoints, large)) {
      padding: 0 nth($label-padding-large, 4);
      font-size: $font-size-normal;
    }

    &#{&}-error {
      color: $white;
      align-self: flex-start;
      border-radius: $field-border-radius;
      background-color: $error-color;
    }

    &-hidden {
      @include hidden;
    }
  }
}
