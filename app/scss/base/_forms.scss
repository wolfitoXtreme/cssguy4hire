// 
// forms
// 

// form layout
.form {

    // form-row
    &-row {

    }

    // form-column
    &-column {

    }

    // form-field
    &-field {
        padding-bottom: prem(6px);
    }

    // form-buttons
    &-buttons {
        margin: 0 prem(-4px); // allows containing buttons margins to fit with the layout
        font-size: 0;
        line-height: 0;
    }

}

// field sets
fieldset {
    padding: 0;
    border-style: none;
}

// legend 
legend {
    @include hidden;
}

// labels
label {
    padding-left: prem(3px);
    font-weight: 600;
    opacity: 0.8;
    font-size: prem($font-size-micro);
    letter-spacing: -0.028em;
    text-transform: uppercase;
    line-height: 1.1;
    display: inline-block;
    @include hidden;

    @include breakpoint(map-get($breakpoints, small)) {
        font-size: prem($font-size-xxx-small);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        padding-left: prem(6px);
        font-size: prem($font-size-xx-small);
        letter-spacing: -0.04em;
        @include unhidden(false);
    }

    @include breakpoint(map-get($breakpoints, large)) {
        padding-left: prem(7px);
        font-size: prem($font-size-normal);
    }

    // sibling fields
    & + input[type="text"],
    & + input[type="tel"],
    & + input[type="email"],
    & + input[type="number"],
    & + input[type="password"],
    & + textarea,
    & + select {
        @include breakpoint(map-get($breakpoints, medium)) {
            margin-top: -1px;
        }
    }
}


// 
// fields
// 

%fields {
    margin: 0;
    padding: prem(5px) prem(8px) prem(6px);
    width: prem(220px);
    font-family: unquote($default-font + ', ' + $default-font-fallback);
    font-weight: 300;
    color: map-deep-get($field-colors, field, color);
    border: 2px solid map-deep-get($field-colors, field, border);
    border-radius: 5px;
    line-height: $line-height-default;
    background-color: map-deep-get($field-colors, field, background);
    @include no-highlight;

    @include breakpoint(map-get($breakpoints, medium)) {
        padding: prem(6px) prem(8px) prem(7px);
        border-radius: 6px;
    }

    @include breakpoint(map-get($breakpoints, large)) {
        padding: prem(9px) prem(14px) prem(11px);
        border-width: 3px;
        border-radius: 7px;
    }

    &:hover,
    &:focus,
    &.focus {
        border-color: map-deep-get($field-colors, hover, border);
    }

    &:focus,
    &.focus {
        // box-shadow: map-deep-get($field-colors, active, shadow);
        background-color: map-deep-get($field-colors, active, background);
    }

    // placeholder (native control and replacement. ex. selectBox)
    &::placeholder, 
    &.placeholder {
        color: $dark-grey;
    }

    &:hover::placeholder,
    &:hover.placeholder {
        color: map-deep-get($field-colors, hover, color);
    }

    // 100% wide fields
    &.wide {
        width: 100%;
    }
}

%input-buttons {
    outline: none;
    @include hidden;
    @include no-highlight;

    // show labels hidden by default
    & ~ label {
        @include unhidden;
    }
}

// common input fields
input[type="text"],
input[type="tel"],
input[type="email"],
input[type="number"],
input[type="password"] {
    @extend %fields;
}

// not in scope
input[type="file"] {}
input[type="range"] {}
input[type="search"] {}
input[type="date"] {}
input[type="datetime-local"] {}
input[type="month"] {}
input[type="week"] {}
input[type="time"] {}
input[type="url"] {}
input[type="color"] {}

// radio buttons
input[type="radio"] {
    @extend %input-buttons;

    // radio button icons
    & + label {
        $_icon-size: prem(14px);
        $_icon-inner-size: prem(6px);
        $_gap: prem(3px);

        padding: 0 prem(2px) prem(4px) $_icon-size + $_gap;
        line-height: $line-height-default;
        position: relative;

        &:before,
        &:after {
            content: "";
            left: 0;
            margin-top: -($_icon-size / 2);
            top: (0.9em * ($line-height-default)) / 2;
            width: $_icon-size;
            height: $_icon-size;
            display: block;
            border: 2px solid map-deep-get($field-colors, field, border);
            border-radius: 100%;
            position: absolute;
        }

        &:after {
            margin-top: -($_icon-inner-size / 2);
            left: ($_icon-size - $_icon-inner-size) / 2;
            width: $_icon-inner-size;
            height: $_icon-inner-size;
            background-color: rgba(map-deep-get($field-colors, field, border), 0.4);
            border-style: none;
        }
        
        // hover state change only for non touch devices (sticky hover)
        .no-touchevents &:hover {
            
            &:before {
                border-color: map-deep-get($field-colors, hover, border);
            }

            &:after {
                // some styling...
            }
        }

        @include breakpoint(map-get($breakpoints, small)) {
            padding-right: prem(5px);
        }

        @include breakpoint(map-get($breakpoints, medium)) {
            $_icon-size: prem(16px);
            $_icon-inner-size: prem(8px);
            
            padding-right: prem(7px);
            padding-left: $_icon-size + $_gap;

            &:before,
            &:after {
                margin-top: -($_icon-size / 2);
                width: $_icon-size;
                height: $_icon-size;
                border-width: 2px;
            }

            &:after {
                margin-top: -($_icon-inner-size / 2);
                left: ($_icon-size - $_icon-inner-size) / 2;
                width: $_icon-inner-size;
                height: $_icon-inner-size;
            }
        }

        @include breakpoint(map-get($breakpoints, large)) {
            $_icon-size: prem(18px);
            $_icon-inner-size: prem(10px);
            
            padding-right: prem(9px);
            padding-left: $_icon-size + $_gap;

            &:before,
            &:after {
                margin-top: -($_icon-size / 2);
                width: $_icon-size;
                height: $_icon-size;
                border-width: 2px;
            }

            &:after {
                margin-top: -($_icon-inner-size / 2);
                left: ($_icon-size - $_icon-inner-size) / 2;
                width: $_icon-inner-size;
                height: $_icon-inner-size;
            }
        }
    }

    // checked state
    &:checked {
        // radio button icons
        & + label {
            color: map-deep-get($field-colors, field, color);
            &:before {
                border-color: map-deep-get($field-colors, active, border);
            }
            &:after {
                background-color: map-deep-get($field-colors, active, border);
            }
        }
    }

    // focus state
    &:focus {
        + label {
            $_scale: scale(1.12);
            
            &:before {
                border-color: map-deep-get($field-colors, hover, border);
                // box-shadow: map-deep-get($field-colors, active, shadow);
                transform: $_scale;
            }

            &:after {
                transform: $_scale;
            }
        }
    }
}

// checkbox buttons
input[type="checkbox"] {
    @extend input[type="radio"];
    & + label {
        &:before,
        &:after {
            border-radius: 0;
        }
    }
}

// text areas
textarea,
.textarea {
    height: prem((($font-size-default *  $line-height-default) * 5) + (13)); // five lines
    overflow-x: hidden;
    resize: none;
    @extend %fields;

    @include breakpoint(map-get($breakpoints, small)) {
        height: prem((($font-size-small *  $line-height-default) * 5) + (15)); // five lines
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        height: prem((($font-size-normal *  $line-height-default) * 5) + (17)); // five lines
    }

    @include breakpoint(map-get($breakpoints, large)) {
        height: prem((($font-size-x-large *  $line-height-default) * 5) + (24)); // five lines
    }
}

// text area replacement
.textarea {
    @extend %fields;
    
    padding-right: prem(18px); // room for scrollbar
    overflow: hidden;
    position: relative;
    

    &.focus {
        border-color: map-deep-get($field-colors, hover, border);
        background-color: map-deep-get($field-colors, active, background);
    }

    // textarea-wrapper
    &-wrapper {
        position: relative;
        display: inline-block;

        // hide real text area
        textarea {
            display: none;
        }
    }

    // textarea__place-holder
    &__place-holder {
        // all paddings match filed paddings, right 18px is room for scrollbar
        padding: prem(5px) prem(18px) prem(6px) prem(8px);
        top: 0;
        left: 0;
        position: absolute;
        z-index: 0;
        display: none;

        @include breakpoint(map-get($breakpoints, medium)) {
            padding: prem(6px) prem(8px) prem(7px);
        }
        
        @include breakpoint(map-get($breakpoints, large)) {
            padding: prem(9px) prem(14px) prem(11px);
        }
    }
    
    // textarea__box-editable
    &__box-editable {
        min-height: 100%;
        width: 100%;
        z-index: 1;
        position: relative;
        display: block;
        word-break: break-all; // force break long lines of text
        @include no-highlight;

        // IE inserts content as paragraphs
        p {
            margin: 0;
            padding: 0;
        }

    }
}

// select
select {
    appearance: none;
    -moz-appearance: none; // Firefox appearance
    @extend %fields;

    // remove drop down arrow for IE
    &::-ms-expand {
        display: none;
    }
}

// options
option option[value=""][disabled] {
    display: none;
}


// 
// buttons
// 


// default buttons
button {
    // dropped in favor of .button class name
}

// button
.button {
    $_padding-x-small:  prem(11px) prem(21px) prem(7px);
    $_padding-small:    prem(12px) prem(23px) prem(7px);
    $_padding-medium:   prem(13px) prem(29px) prem(8px);
    $_padding-large:    prem(19px) prem(39px) prem(13px);

    margin: prem(4px);
    padding: $_padding-x-small;
    font: normal #{prem($font-size-xx-small)}/#{$line-height-default} oswald;
    text-transform: uppercase;
    text-decoration: none;
    color: map-deep-get($btn-colors, default, color);
    letter-spacing: -0.030em;
    display: inline-block;
    cursor: pointer;
    border: 2px solid map-deep-get($btn-colors, default, border);
    border-radius: 5px;
    background-color: map-deep-get($btn-colors, default, background);
    transition: transform 40ms ease-in 0ms;
    @include no-highlight;
    
    @include breakpoint(map-get($breakpoints, small)) {
        padding: $_padding-small;
        font-size: prem($font-size-small);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        padding: $_padding-medium;
        font-size: prem($font-size-normal);
        border-radius: 6px;
    }

    @include breakpoint(map-get($breakpoints, large)) {
        padding: $_padding-large;
        font-size: prem($font-size-x-large);
        border-width: 3px;
        border-radius: 7px;
    }

    &:link,
    &:visited {
        color: map-deep-get($btn-colors, default, color);
    }

    &:hover,
    &:active,
    &:focus {
        border-color: map-deep-get($btn-colors, default, hover-border);
        background-color: map-deep-get($btn-colors, default, hover-background);
    }

    &:active,
    &:focus {
        transform: scale(0.95);
    }

    // button-icon
    &-icon {
        $_icon-width: nth(map-get($icons, ui-button-arrow), 1);
        $_icon-height: nth(map-get($icons, ui-button-arrow), 2);
        $_new-width: 6px;
        $_new-height: stretchBySize($_icon-width, $_icon-height, $_new-width);
        $_new-padding-right: nth($_padding-x-small, 2) + prem($_new-width - 2);
        
        padding-right: $_new-padding-right;
        position: relative;

        // button-icon__icon
        &__icon {
            margin: (-$_new-height / 2) (-($_new-width - 2) / 2) 0 0;
            right: ($_new-padding-right / 2);
            top: 50%;
            width: $_new-width;
            height: $_new-height;
            display: block;
            position: absolute;
            fill: map-deep-get($btn-colors, default, icon);

            // button-icon:hover button-icon
            .button-icon:hover & {
                fill: map-deep-get($btn-colors, default, hover-icon);
            }

        }

        @include breakpoint(map-get($breakpoints, small)) {
            $_new-width: 7px;
            $_new-height: stretchBySize($_icon-width, $_icon-height, $_new-width);
            $_new-padding-right: nth($_padding-small, 2) + prem($_new-width - 2);

            padding-right: $_new-padding-right;

            // button-icon__icon
            &__icon {
                margin: (-$_new-height / 2) (-($_new-width - 2) / 2) 0 0;
                right: ($_new-padding-right / 2);
                width: $_new-width;
                height: $_new-height;
            }
        }

        @include breakpoint(map-get($breakpoints, medium)) {
            $_new-width: 7px;
            $_new-height: stretchBySize($_icon-width, $_icon-height, $_new-width);
            $_new-padding-right: nth($_padding-medium, 2) + prem($_new-width - 2);

            padding-right: $_new-padding-right;

            // button-icon__icon
            &__icon {
                margin: (-$_new-height / 2) (-($_new-width - 2) / 2) 0 0;
                right: ($_new-padding-right / 2);
                width: $_new-width;
                height: $_new-height;
            }
        }

        @include breakpoint(map-get($breakpoints, large)) {
            $_new-width: 10px;
            $_new-height: stretchBySize($_icon-width, $_icon-height, $_new-width);
            $_new-padding-right: nth($_padding-large, 2) + prem($_new-width - 2);

            padding-right: $_new-padding-right;

            // button-icon__icon
            &__icon {
                margin: (-$_new-height / 2) (-($_new-width - 2) / 2) 0 0;
                right: ($_new-padding-right / 2);
                width: $_new-width;
                height: $_new-height;
            }
        }
    }

    // reset button
    &[type="reset"] {
        color: map-deep-get($btn-colors, reset, color);
        border-color: map-deep-get($btn-colors, reset, border);
        
        &:link,
        &:visited {
            color: map-deep-get($btn-colors, reset, color);
        }

        &:hover,
        &:active,
        &:focus {
            color: map-deep-get($btn-colors, reset, hover-color);
            border-color: map-deep-get($btn-colors, reset, hover-border);
            background-color: map-deep-get($btn-colors, reset, hover-background);
        }
    }

}