// 
// typography
//

$_heading-tags: h1, h2, h3, h4, h5, h6;
$_text-block-tags: p, ul, ol, dl, pre, address, blockquote, table;
$_block-tags: article, aside, canvas, div, fieldset, figure, form, hgroup, output, section, video;
$_text-block-and-block-tags: join($_text-block-tags, $_block-tags);
$_heading-and-block-tags: join($_heading-tags, $_block-tags);

html {
    font-family: unquote($default-font + ', ' + $default-font-fallback);
    font-size: pem($font-size-default);
}

body {
    font-size: prem($font-size-xx-small);
    letter-spacing: -0.028em;
    line-height: $line-height-default;
    color: $white;

    @include breakpoint(map-get($breakpoints, small)) {
        font-size: prem($font-size-small);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        font-size: prem($font-size-normal);
        letter-spacing: -0.04em;
    }

    @include breakpoint(map-get($breakpoints, large)) {
        font-size: prem($font-size-x-large);
    }
}

// remove first and last contained elements margins
* > *{
    
    &:first-child {
        margin-top: 0;
    }

    &:last-child {
        margin-bottom: 0;
    }
}

// 
// headings
// 
h1, h2, h3, h4, h5, h6 {
    font-family: $heading-font;
    text-transform: uppercase;
    line-height: 1;
    letter-spacing: -0.03em;
    color: $orange-peel;
    
    // any heading element following a heading block
    @for $i from 1 through length($_heading-tags) {

        & + #{nth($_heading-tags, $i)} {
            margin-top: 0;

            @include breakpoint(map-get($breakpoints, small)) {
               margin-top: prem(3px);
            }

            @include breakpoint(map-get($breakpoints, large)) {
                margin-top: prem(4px);
            }
        }
    }

    // any text block or block element following a heading block
    @for $i from 1 through length($_text-block-and-block-tags) {

        & + #{nth($_text-block-and-block-tags, $i)} {
            margin-top: prem(5px);

            @include breakpoint(map-get($breakpoints, medium)) {
                margin-top: prem(9px);
            }

            @include breakpoint(map-get($breakpoints, large)) {
                margin-top: prem(11px);
            }
        }
    }
}

h1 {
    margin: prem($font-size-xxx-huge / 2) 0 0;
    font-size: prem($font-size-xxx-huge);
    text-shadow: -2px -2px 0 rgba(0, 0, 0, 0.30);

    @include breakpoint(map-get($breakpoints, small)) {
        margin: prem($font-size-massive / 2) 0 0;
        font-size: prem($font-size-massive);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        margin: prem($font-size-gigantic / 2) 0 0;
        font-size: prem($font-size-gigantic);
    }

    @include breakpoint(map-get($breakpoints, large)) {
        margin: prem($font-size-humongous / 2) 0 0;
        font-size: prem($font-size-humongous);
    }
}

h2 {
    margin: prem($font-size-xx-huge / 2) 0 0;
    font-size: prem($font-size-xx-huge);
    text-shadow: -2px -2px 0 rgba(0, 0, 0, 0.30);

    @include breakpoint(map-get($breakpoints, small)) {
        margin: prem($font-size-xxx-huge / 2) 0 0;
        font-size: prem($font-size-xxx-huge);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        margin: prem($font-size-massive / 2) 0 0;
        font-size: prem($font-size-massive);
    }

    @include breakpoint(map-get($breakpoints, large)) {
        margin: prem($font-size-gigantic / 2) 0 0;
        font-size: prem($font-size-gigantic);
    }
}

h3 {
    margin: prem($font-size-huge / 2) 0 0;
    font-size: prem($font-size-huge);

    @include breakpoint(map-get($breakpoints, small)) {
        margin: prem($font-size-x-huge / 2) 0 0;
        font-size: prem($font-size-x-huge);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        margin: prem($font-size-xxx-huge / 2) 0 0;
        font-size: prem($font-size-xxx-huge);
    }

    @include breakpoint(map-get($breakpoints, large)) {
        margin: prem($font-size-massive / 2) 0 0;
        font-size: prem($font-size-massive);
    }
}

h4 {
    margin: prem($font-size-large / 2) 0 0;
    font-size: prem($font-size-large);
    font-weight: 400;
    letter-spacing: -0.05em;

    @include breakpoint(map-get($breakpoints, small)) {
        margin: prem($font-size-xx-large / 2) 0 0;
        font-size: prem($font-size-xx-large);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        margin: prem($font-size-huge / 2) 0 0;
        font-size: prem($font-size-huge);
    }

    @include breakpoint(map-get($breakpoints, large)) {
        margin: prem($font-size-xx-huge / 2) 0 0;
        font-size: prem($font-size-xx-huge);
    }
}

h5 {
    margin: prem($font-size-normal / 2) 0 0;
    font-size: prem($font-size-normal);
    // font-weight: 400;
    // letter-spacing: -0.05em;

    @include breakpoint(map-get($breakpoints, small)) {
        margin: prem($font-size-medium / 2) 0 0;
        font-size: prem($font-size-medium);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        margin: prem($font-size-medium-large / 2) 0 0;
        font-size: prem($font-size-medium-large);
    }

    @include breakpoint(map-get($breakpoints, large)) {
        margin: prem($font-size-xxx-large / 2) 0 0;
        font-size: prem($font-size-xxx-large);
    }
}

h6 {
    margin: prem($font-size-xx-small / 2) 0 0;
    font-size: prem($font-size-xx-small);
    // font-weight: 400;
    // letter-spacing: -0.05em;

    @include breakpoint(map-get($breakpoints, small)) {
        margin: prem($font-size-small / 2) 0 0;
        font-size: prem($font-size-small);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        margin: prem($font-size-medium / 2) 0 0;
        font-size: prem($font-size-medium);
    }

    @include breakpoint(map-get($breakpoints, large)) {
        margin: prem($font-size-x-large / 2) 0 0;
        font-size: prem($font-size-x-large);
    }
}

// default texts
%default-texts {
    margin: prem(16px) 0;

    // any heading or block element following a text block
    @for $i from 1 through length($_heading-and-block-tags) {
        & + #{nth($_heading-and-block-tags, $i)} {
            margin-top: prem(12px);

            @include breakpoint(map-get($breakpoints, small)) {
                margin-top: prem(18px);
                // background-color: lightblue;
            }

            @include breakpoint(map-get($breakpoints, medium)) {
                margin-top: prem(24px);
                // background-color: lightcoral;
            }

            @include breakpoint(map-get($breakpoints, large)) {
                margin-top: prem(34px);
                // background-color: green;
            }
        }
    }
}

// 
// paragraphs
// 
p {
    @extend %default-texts;
}

// 
// lists
//

// lists
%lists {
    padding: 0 0 0 prem(11px);
    list-style: none;
    @extend %default-texts;

    @include breakpoint(map-get($breakpoints, small)) {
        padding: 0 0 0 prem(13px);
    }

    @include breakpoint(map-get($breakpoints, medium)) {
        padding: 0 0 0 prem(15px);
    }

    @include breakpoint(map-get($breakpoints, large)) {
        padding: 0 0 0 prem(20px);
    }

    // nested lists and paragraphs
    & p,
    & ul,
    & ol {
        &:first-child,
        &:last-child {
            margin-bottom: prem(16px);
        }
    }

    p:only-child {
        margin: 0;
    }
}

// list - items
%list-items {
    margin: 0 0 prem(5px);

    p:only-child {
        padding: 0;
    }
}


ul {
    @extend %lists;
}

ol {
    counter-reset: li-counter;
    @extend %lists;

}

dl {
    @extend %lists;
}

li {
    position: relative;
    @extend %list-items;
}

// unordered lists items
ul > li {
    // bullets
    &:before {
        $_bullet-size: prem(7px);

        content: "";
        margin-top: -($_bullet-size / 2);
        top: (1em * $line-height-default) / 2;
        left: prem(-11px);
        width: $_bullet-size;
        height: $_bullet-size;
        border-radius: 100%;
        display: block;
        position: absolute;
        background-color: $orange-peel;
        box-shadow: -1px -1px 0 0 rgba(0, 0, 0, 0.21);

        @include breakpoint(map-get($breakpoints, small)) {
            $_bullet-size: prem(8px);
            
            margin-top: -($_bullet-size / 2);
            left: prem(-13px);
            width: $_bullet-size;
            height: $_bullet-size;
        }

        @include breakpoint(map-get($breakpoints, medium)) {
            $_bullet-size: prem(10px);
            
            margin-top: -($_bullet-size / 2);
            left: prem(-15px);
            width: $_bullet-size;
            height: $_bullet-size;
        }

        @include breakpoint(map-get($breakpoints, large)) {
            $_bullet-size: prem(12px);
            
            margin-top: -($_bullet-size / 2);
            left: prem(-20px);
            width: $_bullet-size;
            height: $_bullet-size;
        }
    }

    // bullets - second level
    ul > li {
        &:before {
            $_bullet-size: prem(5px);

            margin-top: -($_bullet-size / 2);
            width: $_bullet-size;
            height: $_bullet-size;
            border: 1px solid $orange-peel;
            background-color: transparent;
            box-shadow: none;

            @include breakpoint(map-get($breakpoints, small)) {
                $_bullet-size: prem(6px);
                
                margin-top: -($_bullet-size / 2);
                width: $_bullet-size;
                height: $_bullet-size;
            }

            @include breakpoint(map-get($breakpoints, medium)) {
                $_bullet-size: prem(8px);
                
                margin-top: -($_bullet-size / 2);
                width: $_bullet-size;
                height: $_bullet-size;
            }

            @include breakpoint(map-get($breakpoints, large)) {
                $_bullet-size: prem(10px);
                
                margin-top: -($_bullet-size / 2);
                width: $_bullet-size;
                height: $_bullet-size;
                border-width: 2px;
            }
        }


    }

    // bullets - third level
    ul > li > ul > li {
        &:before {
            $_bullet-size: prem(1px);

            height: $_bullet-size;
            margin-top: -($_bullet-size / 2);
            border-radius: 0;
            border-style: none;
            background-color: $orange-peel;

            @include breakpoint(map-get($breakpoints, medium)) {
                $_bullet-size: prem(2px);
                
                height: $_bullet-size;
                margin-top: -($_bullet-size / 2);
            }

            @include breakpoint(map-get($breakpoints, large)) {
                $_bullet-size: prem(2px);
                
                height: $_bullet-size;
                margin-top: -($_bullet-size / 2);
            }

        }
    }

}

// ordered lits items
ol > li {
    &:before {
        content: counter(li-counter) ". ";
        counter-increment: li-counter;
        left: prem(-17px);
        top: 0.36em;
        width: prem(13px);
        font: normal 0.8em/1 oswald;
        color: $orange-peel;
        text-align: right;
        display: block;
        position: absolute;

        @include breakpoint(map-get($breakpoints, small)) {
            left: prem(-19px);
            width: prem(15px);
        }

        @include breakpoint(map-get($breakpoints, medium)) {
            top: 0.46em;
            left: prem(-24px);
            width: prem(20px);
        }

        @include breakpoint(map-get($breakpoints, large)) {
            left: prem(-40px);
            width: prem(32px);
        }


    }
}

dt {
    font-weight: bold;
    @extend %list-items;
}

dd {
    @extend %list-items;
}

hr {
    @include hidden;
}

// bold texts
b, strong {
    font-weight: 600; // matches semi-bold weight
} 

// links
a {
    &:link {
        color: map-get($link-colors, link);
    }
    &:visited {
        color: map-get($link-colors, visited);
    }
    &:hover {
        color: map-get($link-colors, hover);
    }
    &:active {
        color: map-get($link-colors, active);
    }

}

// link color classes
@each $color in map_keys($link-colors) {
    .link-color-#{$color} {
        color: map-get($link-colors, $color);

        // force color states
        &:link,
        &:visited,
        &:hover,
        &:active {
            color: map-get($link-colors, $color);
        }
    }
}

// font family classes
@each $font in map_keys($fonts) {
    
    .font-#{$font} {
        font-family: $font;
    }
}

// font sizes classes
@each $size in map_keys($font-sizes) {
    .font-size-#{$size} {
        font-size: prem(nth(map-get($font-sizes, $size), 1));
    }
}